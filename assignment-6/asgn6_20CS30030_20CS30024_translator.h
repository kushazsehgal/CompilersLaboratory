#ifndef _TRANSLATOR_H
#define _TRANSLATOR_H

#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <list>
#include <functional>
#include <iomanip>
#include <stack>
#include <string.h>
using namespace std;


class SymbolType;
class SymbolTable;
class Symbol;
class Label;
class Quad;
class Expression;
class Array;
class Statement;
class ActivationRecord;

// AR class, used to store important information such as displacements of symbols, total displacement from base pointer, 
class ActivationRecord {
    public:
        map<string, int> displacement;
        int totalDisplacement;

        ActivationRecord();
};

/********************************CLASS DEFINITIONS*******************************************************/
/**
 * @brief Definition for SymbolType Class with definitions of its attributes and methods
 * 
 */
class SymbolType {
    public:
        enum typeEnum {/*Type of Symbol, used ENUM for safe comparisons*/
        FUNCTION = 0, 
        VOID = 1,
        CHAR = 2, 
        INT = 3, 
        FLOAT = 4, 
        POINTER = 5, 
        ARRAY = 6, 
        BLOCK = 7} type;  
        int width;   // width of the symbol
        SymbolType *arrayType;  // type of the array elements

        SymbolType(typeEnum, SymbolType * = NULL, int = 1);  // paramterized constructor
        int getSize();  /*returns the size(width) of the symbol*/
        string toString(); /*returns the string representation of the type*/ 
};


/**
 * @brief Definition for SymbolTable Class with definitions of its attributes and methods
 * 
 */
class SymbolTable {
    public:
        string name;  // name of the symbol table
        map<string, Symbol> symbols;    // list of all symbols in this table, mapped by their names for fast access
        SymbolTable *parent;            // parent symbol table of this symbol table
        ActivationRecord *activationRecord;           // activation record of this symbol table
        vector<string> parameters;    // list of parameters of the function, if any, in order
       
        SymbolTable(string = "null", SymbolTable * = NULL); // constructor
        Symbol *lookup(string); /*returns the symbol with the given name, adds new entry if not found*/ 
        void print();  /*prints the symbol table*/ 
        void update(); /*updates the symbol table*/ 
};

/**
 * @brief Definition for Symbol Class with definitions of its attributes and methods
 * 
 */
class Symbol {
    public:
        string name;  // name of the symbol
        int size, offset; // size and offset of the symbol
        SymbolType *type;  // type of the symbol
        SymbolTable *nestedTable;  // pointer to the symbol table if it is a nested entry
        string initialValue;  // initial value of the symbol
        enum Category {LOCAL, GLOBAL, PARAMETER, TEMPORARY, FUNCTION} category;


        Symbol(string, SymbolType::typeEnum = SymbolType::INT, string = "");  // constructor
        Symbol *update(SymbolType *);  // updates the symbol with the given type
        Symbol *convert(SymbolType::typeEnum);  // converts the symbol to the given type
};

/**
 * @brief Definition for Quad (3AC) Class with definitions of its attributes and methods
 * 
 */
class Quad {
    public:
        string op, arg1, arg2, result;  // parameters of the quad

        Quad(string, string, string = "=", string = "");  // constructor
        Quad(string, int, string = "=", string = ""); // constructor
        void print();  // prints the quad
};

/**
 * @brief Definition for Expression Class with definitions of its attributes and methods
 * 
 */
class Expression {
    public:
        Symbol *symbol;  // symbol of the expression
        enum typeEnum {NONBOOLEAN, BOOLEAN} type;  /*type of the expression scoped enum*/ 
        list<int> trueList, falseList, nextList;  /*lists of quad numbers for next, true and false jumps*/ 

        void toInt();  /*converts the expression to an integer*/ 
        void toBool();  /*converts the expression to a boolean*/ 
};

/**
 * @brief Definition for Array Class with definitions of its attributes and methods
 * 
 */
class Array {
    public:
        Symbol *temp;    /*temporary used for computing the offset for the array reference*/ 
        enum typeEnum {
            OTHER = 0, 
            POINTER = 1,
            ARRAY = 2} type;    /*Pointers, arrays and normal expressions are all stored using array attributes initially*/ 
        Symbol *symbol;  /*pointer to the symbol table entry*/ 
        SymbolType *subArrayType;   /*type of the sub-array generated by A*/ 
};

/**
 * @brief Definition for Statement Class with definitions of its attributes and methods
 * 
 */
class Statement {
    public:
        list<int> nextList;     /*List of quads having dangling exits for this statement*/ 
};

/******************************GLOBAL VARIABLES****************************************/
extern vector<Quad *> quadArray; // array of quads
extern SymbolTable *currentTable, *globalTable; // current and global symbol tables
extern Symbol *currentSymbol;  // current symbol
extern SymbolType::typeEnum currentType;  // current type
extern int tableCount, temporaryCount; // counters for symbol table and temporary symbols
extern vector<string> stringLiterals;
extern FILE *yyin;

/*******************************UTILITY FUNCTIONS**************************************/
/**
 * @brief emit --> emits(generates) a quad with the given parameters
 * 
 */
void emit(string, string, string = "", string = "");  
void emit(string, string, int, string = "");  


/**
 * @brief Backpatching --> backpatches the list of quads with the given address
 * 
 */
void backpatch(list<int>, int);  // backpatches the list of quads with the given address
/**
 * @brief List Utility Functions --> makeList initializes a list, merge joins 2 lists
 * 
 * @return list<int> 
 */
list<int> makeList(int);  // makes a list with the given number
list<int> merge(list<int>, list<int>); // merges the two lists

/**
 * @brief Other Helper Functions
 */

/**
 * @return eturns the next instruction number
 */
int nextInstruction();  
/**
 * @brief  generates a new temporary symbol
 * 
 * @return Symbol* 
 */
Symbol *gentemp(SymbolType::typeEnum, string = ""); 
/**
 * @brief changes the current symbol table to the given one
 * 
 * @return * void 
 */
void changeTable(SymbolTable *);  
void finalBackpatch();
/**Type checking and conversions**/ 
bool typeCheck(Symbol *&, Symbol *&);  // checks if the two symbols have the same type
/**
 * @brief toString --> Converts givcen type to string
 * 
 * @return * string 
 */
string toString(int);  /*returns the string representation of the given integer*/ 
string toString(float);  /*returns the string representation of the given float*/ 
string toString(char);  /*returns the string representation of the given character*/
extern int yyparse();/*parser function present in lex.yy.c*/
/*******************************************************************************************/
#endif